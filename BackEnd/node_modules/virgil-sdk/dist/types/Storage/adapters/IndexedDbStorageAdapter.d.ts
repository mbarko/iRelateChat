import { IStorageAdapter, IStorageAdapterConfig } from './IStorageAdapter';
/**
 * Implementation of {@link IStorageAdapter} that uses IndexedDB for
 * persistence. For use in browsers.
 */
export default class IndexedDbStorageAdapter implements IStorageAdapter {
    private _dbInfo?;
    private _defaultConfig;
    private _ready;
    /**
     * Initializes an instance of `IndexedDbStorageAdapter`.
     * @param {IStorageAdapterConfig} config - Configuration options.
     * Currently only `name` is supported and must be the name of the
     * IndexedDB database where the data will be stored.
     */
    constructor(config: IStorageAdapterConfig);
    /**
     * @inheritDoc
     */
    store(key: string, data: string): Promise<void>;
    /**
     * @inheritDoc
     */
    load(key: string): Promise<string | null>;
    /**
     * @inheritDoc
     */
    exists(key: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    remove(key: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    update(key: string, data: string): Promise<void>;
    /**
     * @inheritDoc
     */
    clear(): Promise<void>;
    /**
     * @inheritDoc
     */
    list(): Promise<string[]>;
    private _initStorage;
    private ready;
}
