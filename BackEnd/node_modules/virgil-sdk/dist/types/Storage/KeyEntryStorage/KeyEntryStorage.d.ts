import { IKeyEntry, IKeyEntryStorage, IKeyEntryStorageConfig, ISaveKeyEntryParams, IUpdateKeyEntryParams } from './IKeyEntryStorage';
export { IKeyEntry, IKeyEntryStorage, IKeyEntryStorageConfig, ISaveKeyEntryParams, IUpdateKeyEntryParams };
/**
 * Class responsible for persisting private key bytes with optional
 * user-defined metadata.
 */
export declare class KeyEntryStorage implements IKeyEntryStorage {
    private adapter;
    /**
     * Initializes a new instance of `KeyEntryStorage`.
     *
     * @param {IKeyEntryStorageConfig} config - Instance configuration.
     */
    constructor(config?: IKeyEntryStorageConfig | string);
    /**
     * @inheritDoc
     */
    exists(name: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    load(name: string): Promise<IKeyEntry | null>;
    /**
     * @inheritDoc
     */
    remove(name: string): Promise<boolean>;
    /**
     * @inheritDoc
     */
    save({ name, value, meta }: ISaveKeyEntryParams): Promise<IKeyEntry>;
    /**
     * @inheritDoc
     */
    list(): Promise<IKeyEntry[]>;
    /**
     * @inheritDoc
     */
    update({ name, value, meta }: IUpdateKeyEntryParams): Promise<IKeyEntry>;
    /**
     * @inheritDoc
     */
    clear(): Promise<void>;
}
